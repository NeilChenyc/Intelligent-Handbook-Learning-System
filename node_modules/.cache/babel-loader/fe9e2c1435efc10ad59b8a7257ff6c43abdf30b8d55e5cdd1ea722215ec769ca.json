{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';// 创建认证上下文\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();// 自定义Hook用于使用认证上下文\nexport const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};// 认证提供者组件\nexport const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isLoading,setIsLoading]=useState(true);// 组件挂载时检查本地存储的用户信息\nuseEffect(()=>{const checkAuthStatus=()=>{try{const storedUser=localStorage.getItem('userInfo');if(storedUser){const userInfo=JSON.parse(storedUser);setUser(userInfo);}}catch(error){console.error('Error parsing stored user info:',error);localStorage.removeItem('userInfo');}finally{setIsLoading(false);}};checkAuthStatus();},[]);// 登录函数\nconst login=userInfo=>{setUser(userInfo);localStorage.setItem('userInfo',JSON.stringify(userInfo));};// 登出函数\nconst logout=()=>{setUser(null);localStorage.removeItem('userInfo');};// 检查用户是否已登录\nconst isAuthenticated=()=>{return user!==null;};// 检查用户是否为管理员\nconst isAdmin=()=>{return user&&user.role==='admin';};// 检查用户是否为学员\nconst isStudent=()=>{return user&&user.role==='student';};// 获取用户权限\nconst getUserPermissions=()=>{if(!user)return[];const basePermissions=['dashboard','learning','progress'];if(user.role==='admin'){return[...basePermissions,'compliance','user-management','system-settings'];}else if(user.role==='student'){return basePermissions;}return[];};// 检查用户是否有特定权限\nconst hasPermission=permission=>{const permissions=getUserPermissions();return permissions.includes(permission);};const value={user,isLoading,login,logout,isAuthenticated,isAdmin,isStudent,getUserPermissions,hasPermission};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export default AuthContext;","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","isLoading","setIsLoading","checkAuthStatus","storedUser","localStorage","getItem","userInfo","JSON","parse","error","console","removeItem","login","setItem","stringify","logout","isAuthenticated","isAdmin","role","isStudent","getUserPermissions","basePermissions","hasPermission","permission","permissions","includes","value","Provider"],"sources":["/Users/a99/localDocuments/codeBase/ideaWorkplace/5620/src/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// 创建认证上下文\nconst AuthContext = createContext();\n\n// 自定义Hook用于使用认证上下文\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// 认证提供者组件\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // 组件挂载时检查本地存储的用户信息\n  useEffect(() => {\n    const checkAuthStatus = () => {\n      try {\n        const storedUser = localStorage.getItem('userInfo');\n        if (storedUser) {\n          const userInfo = JSON.parse(storedUser);\n          setUser(userInfo);\n        }\n      } catch (error) {\n        console.error('Error parsing stored user info:', error);\n        localStorage.removeItem('userInfo');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuthStatus();\n  }, []);\n\n  // 登录函数\n  const login = (userInfo) => {\n    setUser(userInfo);\n    localStorage.setItem('userInfo', JSON.stringify(userInfo));\n  };\n\n  // 登出函数\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('userInfo');\n  };\n\n  // 检查用户是否已登录\n  const isAuthenticated = () => {\n    return user !== null;\n  };\n\n  // 检查用户是否为管理员\n  const isAdmin = () => {\n    return user && user.role === 'admin';\n  };\n\n  // 检查用户是否为学员\n  const isStudent = () => {\n    return user && user.role === 'student';\n  };\n\n  // 获取用户权限\n  const getUserPermissions = () => {\n    if (!user) return [];\n    \n    const basePermissions = ['dashboard', 'learning', 'progress'];\n    \n    if (user.role === 'admin') {\n      return [...basePermissions, 'compliance', 'user-management', 'system-settings'];\n    } else if (user.role === 'student') {\n      return basePermissions;\n    }\n    \n    return [];\n  };\n\n  // 检查用户是否有特定权限\n  const hasPermission = (permission) => {\n    const permissions = getUserPermissions();\n    return permissions.includes(permission);\n  };\n\n  const value = {\n    user,\n    isLoading,\n    login,\n    logout,\n    isAuthenticated,\n    isAdmin,\n    isStudent,\n    getUserPermissions,\n    hasPermission\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}